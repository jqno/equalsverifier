#summary Frequently Asked Questions.
#labels Featured

<wiki:toc max_depth="2" />

=Philosophy=
==Can !EqualsVerifier give false positives?==
Yes, it can. !EqualsVerifier will not search a class's entire state space. If you write an `equals` method as below, !EqualsVerifier will not notice that it's incorrect.
{{{
public boolean equals(Object obj) {
    if (!(obj instanceof MyClass)) {
        return false;
    }
    if (myInt == 100) {
        return false;
    }
    return myInt == ((MyClass)obj).myInt;
}
}}}
The example is a little far-fetched, but it illustrates the point that you have to write bad code _on purpose_ to make !EqualsVerifier think your `equals` method is correct when it is not.

==Can !EqualsVerifier give false negatives?==
Yes, it can. Just try to verify `String`: it will fail. `String` employs some tricks for better performance, that !EqualsVerifer can't verify. However, the good people who wrote `String` knew what they were doing, and have proven their implementation correct. If you prove your implementation correct, you don't need !EqualsVerifier.

==So what's the point of !EqualsVerifier then?==
!EqualsVerifier is a useful tool for anyone who wants to implement the `equals` and `hashCode` methods, without trying anything fancy. Implementing `equals` is hard, even for simple classes. Since most classes are simple, !EqualsVerifier can be a great help in making sure that your implementation fulfills the contract.

!EqualsVerifier catches common mistakes, such as forgetting to include a field in `hashCode` that is tested in `equals`. It also encourages robustness, for example by warning about non-final fields, and by watching out for inheritance issues.

If you run into a situation where !EqualsVerifier can't help you, you are probably in one (or more) of the following situations:
 # You're writing non-trivial, high-performance niche code at NASA.
 # You're a Java API developer.
 # You're writing malicious code on purpose.
 # You're writing code that's way too complicated, and you should probably refactor.

(And even in the first two cases, !EqualsVerifier can help creating an initial working implementation.)

==How should I write a good `equals` method?==
By far the best explanation on the subject, in my opinion, can be found in Chapter 28 of _Programming in Scala_ by Martin Odersky, Bill Venners and Lex Spoon. The authors have adapted the chapter to Java and placed it online [http://www.artima.com/lejava/articles/equality.html here].

Another excellent source, of course, is Items 8 and 9 from Josh Bloch's _Effective Java, Second Edition_.


=Error messages=
==Can you explain the error message I just got from !EqualsVerifier?==
Take a look at [ErrorMessages the Error Messages page].

==I'm testing `java.lang.String`, but it fails.==
Please don't test `java.lang.String`, because indeed it fails. Please see the section on [FAQ#Can_EqualsVerifier_give_false_negatives? false negatives] above.

=Build=
==Can I use !EqualsVerifier with Maven?==
Yes! Click [Maven here] for details.

==How do I build !EqualsVerifier?==
First, check out the code. You can open the project in Eclipse, or you can run ANT directly. Note that Java 6 is required to compile the project, although the ANT script will generate Java 5 compatible JAR files.

==Why can't Eclipse resolve the dependencies?==
!EqualsVerifier uses [http://ant.apache.org/ivy/ Apache Ivy] to resolve all dependencies. If you want !EqualsVerifier to compile in Eclipse, you need to install the [http://ant.apache.org/ivy/ivyde/ IvyDE] plugin, which will take care of the dependencies for you.

==I get generics errors while building==
<pre>
type parameters of <S>S cannot be determined; no unique maximal instance exists for 
type variable S with upper bounds T,java.lang.Object
</pre>

!EqualsVerifier makes heavy use of generics. Sun's Java compiler has a known bug regarding generics. Since I use Eclipse and OpenJDK, which do not exhibit this bug, it's possible I write code that triggers the bug, and the code might not compile. If this happens, please let me know in an issue and I'll fix it.