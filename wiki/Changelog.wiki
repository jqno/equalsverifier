#summary Changelog

= Changelog =

What's new?

Well, you can now ...

== Version 0.6.3 ==
  * ... test the equals/hashCode contract for classes that don't override `equals` or `hashCode`. ([http://code.google.com/p/equalsverifier/issues/detail?id=23 Issue 23])
  * ... use `EqualsVerifier` in conjuction with the [http://www.eclemma.org/ EclEmma] code coverage tool. ([http://code.google.com/p/equalsverifier/issues/detail?id=22 Issue 22])
  * ... test classes that contain (indirect) references to non-static inner classes, without getting messages about recursive data structures. ([http://code.google.com/p/equalsverifier/issues/detail?id=21 Issue 21])

== Version 0.6.2 ==
  * ... use `#withPrefabValues()` for recursive data structure fields in superclasses again. ([http://code.google.com/p/equalsverifier/issues/detail?id=20 Issue 20])

== Version 0.6.1 ==
  * ... use `#withPrefabValues()` for fields which delegate to abstract methods again. ([http://code.google.com/p/equalsverifier/issues/detail?id=14 Issue 14])
  * ... access the `#verify()` method more quickly using autocompletion in IDEs. (The method `#verbose()` has been renamed to `#debug()`.)

== Version 0.6 ==
  * ... use a more consistent API. `#with(Feature)` is now `#suppress(Warning)`, which feels more Java-y. Former features that were not warnings, are now proper methods on `EqualsVerifier`: `#verbose()` and `#withRedefinedSuperclass()`.
  * ... get better error messages:
    * many messages now span multiple lines for improved readability;
    * hashCodes are printed (where relevant);
    * unexpected exceptions are no longer eaten by `EqualsVerifier`, so they can be read without calling `#verbose()`;
    * calls to abstract methods from within `equals` and `hashCode`, which cannot be resolved, are now detected and properly reported. ([http://code.google.com/p/equalsverifier/issues/detail?id=14 Issue 14])
  * ... verify classes that contain fields whose `equals` methods might throw `NullPointerException`s. ([http://code.google.com/p/equalsverifier/issues/detail?id=19 Issue 19])
  * ... be sure that `EqualsVerifier` doesn't detect recursive data structures where there are none. ([http://code.google.com/p/equalsverifier/issues/detail?id=18 Issue 18])
  * ... use fields of type `Class` in your classes. ([http://code.google.com/p/equalsverifier/issues/detail?id=17 Issue 17])

== Version 0.5 ==
  * ... test classes that contain fields of interface or abstract class types (such as Lists, and other Collection types). ([http://code.google.com/p/equalsverifier/issues/detail?id=12 Issue 12])
  * ... step through the source code in Eclipse after adding the EqualsVerifier jar to your project. ([http://code.google.com/p/equalsverifier/issues/detail?id=11 Issue 11])

== Version 0.4 ==
  * ... verify equality rules that are more relaxed than simple field-by-field comparison. ([http://code.google.com/p/equalsverifier/issues/detail?id=9 Issue 9])

== Version 0.3 ==
  * ... use `EqualsVerifier` without having to call `#withPrefabValues(...)` all the time. ([http://code.google.com/p/equalsverifier/issues/detail?id=7 Issue 7])

== Version 0.2 ==
  * ... use the _fields are never null_ feature on classes instantiated with `#forClass(Class)`. ([http://code.google.com/p/equalsverifier/issues/detail?id=1&can=1 Issue 1])
  * ... check if `Arrays.deepEquals` was used for multidimensional and `Object` arrays. ([http://code.google.com/p/equalsverifier/issues/detail?id=3 Issue 3])
  * ... access optional features through a clean enum instead of through lots of different method calls. ([http://code.google.com/p/equalsverifier/issues/detail?id=4 Issue 4])
  * ... use `EqualsVerifier` in unit test frameworks other than JUnit 4 ([http://code.google.com/p/equalsverifier/issues/detail?id=5 Issue 5])
  * ... have stacktraces be printed to `System.err`. ([http://code.google.com/p/equalsverifier/issues/detail?id=6 Issue 6])